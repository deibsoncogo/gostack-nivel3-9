Rocketseat Bootcamp GoStack - Nível 3

------> 9. Primeiro projeto com React
Nessa etapa daremos início ao aprendizado do ReactJS, criando o primeiro projeto já
utilizando TypeScript, nesse ponto o dev já deve conhecer os conceitos de componente,
estado e propriedades mas eles serão lembrados durante as aulas

----> 1. Estrutura e padrões
--> Criando projeto
Neste nível iremos montar o projeto utilizando o React sem a realização de fatorização
do código pois já aprendemos os metodos de uma doa programação

O comando abaixo realiza a criacao dos arquivos base para o nosso projeto, este
comando também realiza diversas configurações que realizamos manualmente, por padrão
ele cria os arquivos com o formato de JavaScript, com alterar isso adicionamos um
comando para mudar pro TypeScript e está configuração tende a demorar
	create-react-app nivel3 --template=typescript

Algusn arquivos podemos excluir mais ai teremos que remover sua importar nos outros
  App.css
  App.test.tsx
  index.css
  logo.svg
  serviceWorker.ts
  favicon.ico
  logo192.png
  logo512.png
  manifest.json

A depencia react-scripts possui internamente muitas das extenções que instalamos
conforme precisamos, os atalhos criado automaticamente serve para
  strat: Iniciar o servidor de desenvolvimento para nos verificar
  build: Gerar um servidor mais otimizado para a produção
  test: Para rodar alguns testes na aplicação
  eject: Traz os arquivos de configuração das depencias dentro do react-scripts

A ejeção das configurações das depencias dentro do react-scripts, não possui volta

--> Padrões de Projeto com Eslint, Prettier e Editor Config
Primeiro instalamos a extensão do EditorConfig e depois criamos o arquivo de
configuração do EditorConfig cliando o botão direito e criar e inserir este comandos
  root = true

  [*]
  indent_style = tab
  indent_size = 2
  charset = utf-8
  trim_trailing_whitespace = true
  insert_final_newline = true
  end_of_line = crlf

Agora devemos instalar a extensão e a depencia com desenvolvedor do ESLint
  yarn add eslint@6.8.0 -D

Atenção a versão mais recente do Eslint está gerando conflitos

Temos que sertificar se a configuração abaixo está no arquivo package.json
  "eslintConfig": {
    "extends": "react-app"
  },

Para criar o arquivo de configuração do Eslint usamos o comando abaixo
  yarn eslint --init

Respondemos as perguntas e depois instalamos as dependencias que precisaremos:
  ? How would you like to use ESLint? To check syntax, find problems, and enforce code style
	? What type of modules does your project use? JavaScript modules (import/export)
	? Which framework does your project use? None of these
	? Does your project use TypeScript? Yes
	? Where does your code run? Node
	? How would you like to define a style for your project? Use a popular style guide
	? Which style guide do you want to follow? Airbnb: https://github.com/airbnb/javascript
	? What format do you want your config file to be in? JSON

Depois de responser as pergutnas cima teremos farias dependencias para instalar
  yarn add @typescript-eslint/eslint-plugin@latest eslint-config-airbnb-base@latest eslint-plugin-import@^2.21.2 @typescript-eslint/parser@latest -D

Criamos um arquivo para ignoração sua execução nos seguintes caminhos
  .eslintignore

  /*.js
  node_modules
  dist

Faz o React ler e entender os arquivos TypeScript
  yarn add eslint-import-resolver-typescript -D

Apos adicionar as configurações abaixo no arquivo .eslint.json ficaram pronto
  "extends": [
		"plugin:@typescript-eslint/recommended",
  ],
  "rules": {
    "import/extensions": [
      "error",
      "ignorePackages",
      {
        "ts": "never"
      }
    ]
  },
  "settings": {
    "import/resolver": {
      "typescript": {}
    }
  }

Para instalar com a utilização do ReactJS devemos realizar outros passo

Temos que instalar as seguintes depencias para utilizar o Prettier
  yarn add prettier eslint-config-prettier eslint-plugin-prettier -D

Realizamos algumas configurações para incorporar o Prettier no Eslint
  "extends": [
    "prettier/@typescript-eslint",
    "plugin:prettier/recommended"
  ],
  "plugins": [
    "prettier"
  ],
  "rules": {
    "prettier/prettier": "error",
  },

Também criamos o arquivo abaixo para pode realizar as configurações
  prettier.config.js

  module.exports = {
    singleQuote: true,
    trailingComma: 'all',
    arrowParens: 'avoid',
    printWidth: 91,
  }

--> Figma Github Explorer
Temos abaixo o link da arte para o nosso programa (API)
  https://www.figma.com/file/HOCmxfrElzLpI75LdzFLia/Github-Explorer?node-id=0%3A1

----> 2. Criando a aplicação
--> Criando Rotas
O formato TSX serve para trabalhar com JavaScript ou TypeScript e HTML

Para lidar com as rotas iremos usar a depencia abaixo para React
  yarn add react-router-dom
  yarn add @types/react-router-dom -D

Ao criar um arquivo conseguimos também criar pastas, para isso bastar escrevermos o
caminho separando o nome das pastas por barra e informando a extenção do arquivo
  pages/inicial/index.tsx

O BrowserRouter define o endereço do site e o exact faz que o endereço buscado
deve ser igual ao do sistema

Devemos usar o comando abaixo da depencia do React Router Dom para difidir as rotas
	Switch

--> Utilizando Styled Components
A depencia abaixo é muito importante para todos tipos de React pois ele permite a
criação de personalização isolada (CSS) já que todo CSS é considerado como global
sem a utilização de uma classe
  yarn add styled-components
	yarn add @types/styled-components -D

A extenção abaixo deixa os arquivos da depencia styled-components igual de um CSS
  vscode-styled-components

Para definir uma fonte especifica vamos precisar de um código dela,
conseguimos isso no site do Google Fonts
  https://fonts.google.com/
    Escole a fonte
			Reboto
    Select this style
			Regular 400
			Bold 700
    Embed
    Copiar o link
    Cola no public/index.html
			<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">

--> Estilizando Dashboard (Home)
Temos a biblioteca Polished que permite trabalhar com cores
  yarn add polished

Para criar a lista dos repositorios usamos uma div pois ele possuir link,
na utilização de ul teremos que adaptala para receber link

Quando algo é clicavel precisa ser uma ancora ou um botão
É legal primeiro criar a estrutura para depois vincular com o banco de dados

Para realizar um bom aliamento dos itens devemos criar novas divs,
isso deve acontecer quando o próximo item muda de direção
	AA	BB
			CC

A biblioteca abaixo disponibiliza icones interesantes
  yarn add react-icons

Verifique nos arquivos styles.ts os comandos de estilização
